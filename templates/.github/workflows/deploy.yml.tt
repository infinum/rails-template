name: Deploy to online environment

on:
  workflow_call:
    inputs:
      environment:
        description: GitHub Actions environment (eg. staging or production)
        required: true
        type: string
      subnet_ids:
        description: List of subnet IDs for the ECS task
        required: true
        type: string
      security_group_ids:
        description:  List of security group IDs for the ECS task
        required: true
        type: string
      git_ref:
        description: Git revision to checkout for build and deployment steps. Also used as image tag.
        required: true
        type: string

jobs:
  context:
    name: Setup context
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      aws_region: ${{ steps.get.outputs.aws_region }}
      aws_ecr_uri: ${{ steps.get.outputs.aws_ecr_uri }}
      aws_ecr_region: ${{ steps.get.outputs.aws_ecr_region }}
      aws_ecr_account_id: ${{ steps.get.outputs.aws_ecr_account_id }}
      aws_ecs_cluster: ${{ steps.get.outputs.aws_ecs_cluster }}
    steps:
      - id: get
        run: |
          echo "aws_region=${{ vars.AWS_REGION }}" >> "$GITHUB_OUTPUT"
          echo "aws_ecr_uri=${{ vars.AWS_ECR_URI }}" >> "$GITHUB_OUTPUT"
          echo "aws_ecr_region=${{ vars.AWS_ECR_REGION }}" >> "$GITHUB_OUTPUT"
          echo "aws_ecr_account_id=${{ vars.AWS_ECR_ACCOUNT_ID }}" >> "$GITHUB_OUTPUT"
          echo "aws_ecs_cluster=${{ vars.AWS_ECS_CLUSTER }}" >> "$GITHUB_OUTPUT"

  build-deploy-image-and-push:
    name: Build deploy image and push to registry
    uses: infinum/devops-pipelines/.github/workflows/docker-build-push.yml@v3.0.0
    needs: context
    with:
      environment: ${{ inputs.environment }}
      cloud: AWS
      tags: ${{ needs.context.outputs.aws_ecr_uri }}:${{ inputs.git_ref }}
      aws_region: ${{ needs.context.outputs.aws_region }}
      aws_ecr_region: ${{ needs.context.outputs.aws_ecr_region }}
      aws_ecr_account_id: ${{ needs.context.outputs.aws_ecr_account_id }}
      target: deploy
      secret_files: |
        app-secrets=sample.env
      git_ref: ${{ inputs.git_ref }}
    secrets: inherit

  deploy-migrations:
    name: Deploy migrations
    uses: infinum/devops-pipelines/.github/workflows/ecs-run-task.yml@v3.0.0
    needs: [context, build-deploy-image-and-push]
    with:
      environment: ${{ inputs.environment }}
      aws_region: ${{ needs.context.outputs.aws_region }}
      ecs_cluster: ${{ needs.context.outputs.aws_ecs_cluster }}
      task_definition_path: infra/ecs/task-definition-app-${{ inputs.environment }}.json
      image_uri: ${{ needs.context.outputs.aws_ecr_uri }}:${{ inputs.git_ref }}
      container_name: <%= app_name %>
      override_container_name: <%= app_name %>
      override_container_command: |
        bundle
        exec
        rake
        db:migrate
      subnet_ids: ${{ inputs.subnet_ids }}
      security_group_ids: ${{ inputs.security_group_ids }}
      git_ref: ${{ inputs.git_ref }}
    secrets: inherit

  deploy-backend:
    name: Deploy backend
    uses: infinum/devops-pipelines/.github/workflows/deploy-ecs-task-definition.yml@v3.0.0
    needs: [context, deploy-migrations]
    with:
      image_uri: ${{ needs.context.outputs.aws_ecr_uri }}:${{ inputs.git_ref }}
      environment: ${{ inputs.environment }}
      aws_region: ${{ needs.context.outputs.aws_region }}
      ecs_cluster: ${{ needs.context.outputs.aws_ecs_cluster }}
      ecs_service: <%= app_name %>
      task_def_path: infra/ecs/task-definition-app-${{ inputs.environment }}.json
      container_name: <%= app_name %>
      git_ref: ${{ inputs.git_ref }}
    secrets: inherit

  deploy-background-job-processor:
    name: Deploy background job processor
    uses: infinum/devops-pipelines/.github/workflows/deploy-ecs-task-definition.yml@v3.0.0
    needs: [context, deploy-migrations]
    with:
      image_uri: ${{ needs.context.outputs.aws_ecr_uri }}:${{ inputs.git_ref }}
      environment: ${{ inputs.environment }}
      aws_region: ${{ needs.context.outputs.aws_region }}
      ecs_cluster: ${{ needs.context.outputs.aws_ecs_cluster }}
      ecs_service: <%= app_name %>-sidekiq
      task_def_path: infra/ecs/task-definition-sidekiq-${{ inputs.environment }}.json
      container_name: <%= app_name %>-sidekiq
      git_ref: ${{ inputs.git_ref }}
    secrets: inherit

  deployment-status:
    name: Deployment status
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [deploy-migrations, deploy-backend, deploy-background-job-processor]
    if: ${{ always() }}
    outputs:
      status: ${{ steps.status.outputs.status }}
    steps:
      - id: status
        name: Determine deployment status
        run: |
          status='success'
          if [ "${{ needs.deploy-migrations.result }}" != 'success' ]; then
            status="${{ needs.deploy-migrations.result }}"
          elif [ "${{ needs.deploy-backend.result }}" != 'success' ]; then
            status="${{ needs.deploy-backend.result }}"
          elif [ "${{ needs.deploy-background-job-processor.result }}" != 'success' ]; then
            status="${{ needs.deploy-background-job-processor.result }}"
          fi
          echo "status=$status" >> "$GITHUB_OUTPUT"

  notify:
    name: Send Slack notification
    uses: infinum/devops-pipelines/.github/workflows/slack-notification.yml@v1.13.0
    needs: deployment-status
    with:
      channel: product-<%= app_name %>-notifications
      outcome: ${{ needs.deployment-status.outputs.status }}
      color: ${{ needs.deployment-status.outputs.status }}
      title: "[${{ inputs.environment }}] Deploy ${{ needs.deployment-status.outputs.status }}"
    secrets: inherit
